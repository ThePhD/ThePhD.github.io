# How It Works


### Right Now: ADL Customization Point Object

```cpp
auto result_x = std::ranges::reconstruct(std::in_place_type<RangeType>, iter, sent);
auto result_y = std::ranges::reconstruct(iter, sent);
```


### Desired Order of Operations - Part I

`std::ranges::reconstruct(std::in_place_type<RangeType>, iter, sent);`
- Is the expression `reconstruct(std::in_place_type<RangeType>, iter, sent)` well-formed?
  - Yes? Call it!
- Otherwise, call `std::ranges::reconstruct(iter, sent);`


### Desired Order of Operations - Part II

`std::ranges::reconstruct(iter, sent);`
- Let `I` be `	std::remove_cvref_t<decltype(Iter)>`
  - Is the expression `I::reconstruct(iter, sent)` well-formed?
  - Call it!
- Otherwise, return `std::ranges::subrange(iter, sent)`


### Properties

What does this buy us?

- Code never fails! Fallback to `std::ranges::subrange<I, S, K>`
- Preserves type semantics
- Preserves size semantics  
  `llfio::io_span` for Windows Buffers [`T*`, `int32_t`)
- JUST iterators are not subject to catch-all ADL customization
- "Decay" a range if it cannot be properly reconstructed


### Properties - ADL on JUST iterators ‚ùå‚ùå

```cpp
namespace mylib {
  // ... Catches TOO MANY THINGS!!!!
  auto reconstruct(const char* ptr_first, const char* ptr_last)
  {
    return std::string_view(ptr_first, ptr_last);
  }
}
```


### Properties - Catch-All Protection ‚úî‚úî

```cpp
namespace mylib {
  template <typename Value, typename CharT, typename Traits>
  class basic_istream_view {
    class iterator {
      // well-scoped, does not infect things
      static basic_istream_view reconstruct (iterator it, sentinel sen) {
        // üëç well-scoped!
      }
    };
  };
}
```


### Properties - Decay

```cpp
namespace mylib {
  template <typename CharT, typename Traits>
  auto reconstruct(
    std::in_place_type_t<my_lib::basic_c_string_view<CharT, Traits>>,
    const CharT* ptr_first,
    const CharT* ptr_last)
  {
    return std::basic_string_view<CharT, Traits>(ptr_first, ptr_last);
  }
}
```



### Properties - No Decay

```cpp
namespace mylib {
  template <typename CharT, typename Traits>
  auto reconstruct(
    std::in_place_type_t<basic_c_string_view<CharT, Traits>>,
    const CharT* ptr_first,
    const c_string_sentinel sentinel)
  {
    return basic_c_string_view<CharT, Traits>(ptr_first, sentinel);
  }
}
```
